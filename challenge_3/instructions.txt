
=========================
ROUTING PUZZLE IN NEXT.JS
=========================

Overview:
---------
The Routing Puzzle is an interactive component built using React and Next.js.
It is designed to explain the concept of routing in web applications in a
fun, puzzle-like way. Unlike navigation, where the user chooses known links,
routing automatically determines which page to display based on a path or URL.

Concepts Demonstrated:
----------------------
1. Navigation vs Routing:
   - Navigation: Picking a known page using links/buttons (user-controlled).
   - Routing: System decides which component/page to show based on the URL
     (automatically matches paths to pages).

2. Static Routing:
   - Certain paths directly map to pages, e.g., "/home" → Home Page.

3. Dynamic Routing:
   - Paths with variables, e.g., "/product/42" → Product Page with ID 42.

4. Error Handling (404):
   - Typing a path that doesn’t exist shows a "Broken Puzzle Piece" message.

---

Component Structure:
--------------------
1. PuzzlePiece.js
   - Displays a single puzzle piece (page).
   - Props: `label` → Name or type of the puzzle piece.

2. NavigationPuzzle.js
   - Demonstrates navigation.
   - Contains buttons/links to static pages (e.g., Home, About, Contact).

3. RoutingPuzzle.js
   - Demonstrates routing.
   - Input box for users to type a path.
   - Displays the corresponding puzzle piece if path exists.
   - Shows 404 message if path does not exist.
   - Supports dynamic routing for paths like "/product/:id".

---

How to Use the Routing Puzzle:
------------------------------
1. Start the Next.js application:
   - Open terminal and run:
     npm run dev
   - Visit: http://localhost:3000

2. Navigate to the Routing Puzzle page:
   - Click "Routing Puzzle" from the home page links.

3. Solve the routing puzzle:
   - Type a valid path like:
       /home
       /about
       /contact
       /product/42
   - Observe which puzzle piece appears.
   - If you type an invalid path, the 404 puzzle piece will appear.

4. Experiment:
   - Try typing different paths to see how routing matches static and
     dynamic paths.
   - Understand how routing decides which page/component to display
     based on URL patterns.

---

Key Learning Points:
-------------------
- Routing is the set of rules that maps URLs to components/pages.
- Dynamic routing allows flexibility with parameters in URLs.
- 404 handling is important for unmatched paths.
- Navigation is a manual action, whereas routing is automatic.

---

Tips:
-----
- The Routing Puzzle can be enhanced with drag-and-drop pieces or
  animations to make it more interactive.
- You can add more paths and dynamic patterns as needed.

